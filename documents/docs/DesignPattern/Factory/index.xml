<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工厂模式 on 用什么？这里或许能找到答案...</title>
    <link>https://alanweekend.github.io/DesignPattern/Factory/</link>
    <description>Recent content in 工厂模式 on 用什么？这里或许能找到答案...</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 24 Nov 2021 11:46:06 +0800</lastBuildDate><atom:link href="https://alanweekend.github.io/DesignPattern/Factory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TransientObjectFactory</title>
      <link>https://alanweekend.github.io/DesignPattern/Factory/TransientObjectFactory/</link>
      <pubDate>Wed, 24 Nov 2021 11:46:06 +0800</pubDate>
      
      <guid>https://alanweekend.github.io/DesignPattern/Factory/TransientObjectFactory/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    临时对象池工厂
用法    using UnityEngine; using WithWhat.DesignPattern; public class TransientFactoryTest : MonoBehaviour { private TransientObjectFactory _transientObjectFactory; public class Foo { public void Do() { print($&amp;#34;{GetHashCode()}:DoSomething&amp;#34;); } } private void Awake() { _transientObjectFactory = new TransientObjectFactory(); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { var foo = _transientObjectFactory.AcquireObject&amp;lt;Foo&amp;gt;(); foo.Do(); } } } </description>
    </item>
    
    <item>
      <title>SingleTonObejctFactory</title>
      <link>https://alanweekend.github.io/DesignPattern/Factory/SingleTonObejctFactory/</link>
      <pubDate>Wed, 24 Nov 2021 11:25:04 +0800</pubDate>
      
      <guid>https://alanweekend.github.io/DesignPattern/Factory/SingleTonObejctFactory/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    单例池工厂
用法    using UnityEngine; using WithWhat.DesignPattern; public class SingleTonFactoryTest : MonoBehaviour { private SingleTonObejctFactory _singleTonObejctFactory; public class HttpService { public void GetData() { print($&amp;#34;{this.GetHashCode()}:GetData&amp;#34;); } } private void Awake() { _singleTonObejctFactory = new SingleTonObejctFactory(); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { var httpService = _singleTonObejctFactory.AcquireObject&amp;lt;HttpService&amp;gt;(); httpService.GetData(); } } } </description>
    </item>
    
    <item>
      <title>PoolObjectFactory</title>
      <link>https://alanweekend.github.io/DesignPattern/Factory/PoolObjectFactory/</link>
      <pubDate>Wed, 24 Nov 2021 11:19:45 +0800</pubDate>
      
      <guid>https://alanweekend.github.io/DesignPattern/Factory/PoolObjectFactory/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    对象池工厂
用法    using UnityEngine; using WithWhat.DesignPattern; public class PoolFactoryTest : MonoBehaviour { private PoolObjectFactory _poolObjectFactory; public class DBConnect { public void Insert() { print($&amp;#34;insert{this.GetHashCode()}&amp;#34;); } } private void Awake() { _poolObjectFactory = new PoolObjectFactory(100, false); } private void Update() { if (Input.GetKeyDown(KeyCode.Space)) { // 从对象池获取对象  var dbConnect = _poolObjectFactory.AcquireObject&amp;lt;DBConnect&amp;gt;(); dbConnect.Insert(); // 使用完，返还给对象池  _poolObjectFactory.ReleaseObject(dbConnect); } } } </description>
    </item>
    
  </channel>
</rss>
