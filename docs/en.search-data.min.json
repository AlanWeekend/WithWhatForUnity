[{"id":0,"href":"/WithWhatForUnity/Utils/MathUtils/Random/GetRandomType/","title":"GetRandomType()","parent":"随机数工具函数","content":"Github Gitee\nWithWhat.Utils\n描述    获取概率类型\n参数       参数名 类型 描述     probabilitys List 每种可能性的概率，例如[20,30,50]    返回值       类型 描述     int 概率类型，第几种可能性    "},{"id":1,"href":"/WithWhatForUnity/Utils/ListUtils/","title":"List类拓展","parent":"工具类","content":"   方法 描述     RemoveMatch 删除List中符合条件的所有元素    "},{"id":2,"href":"/WithWhatForUnity/Utils/ListUtils/RemoveMatch/","title":"RemoveMatch()","parent":"List类拓展","content":"Github Gitee\nWithWhat.Utils\n描述    删除List中符合条件的所有元素，不会产生额外的GC，只遍历一次集合 详情\n参数       参数名 类型 描述     Match Predicate 匹配函数    "},{"id":3,"href":"/WithWhatForUnity/Utils/","title":"工具类","parent":"用什么？这里或许能找到答案...","content":"   模块 描述     MathUtils 数学工具   VectorUtils Vector工具   ListUtils List类拓展    "},{"id":4,"href":"/WithWhatForUnity/Utils/MathUtils/","title":"数学工具类","parent":"工具类","content":"   模块     贝塞尔曲线   获取一组随机数    "},{"id":5,"href":"/WithWhatForUnity/","title":"用什么？这里或许能找到答案...","parent":"","content":"安装方法  Window - PackgeManager - Add packge from git URL\n https://github.com/AlanWeekend/WithWhatForUnity.git\n  https://gitee.com/week233/with_what_for_unity.git\n 案例：   GitHub Gitee\n    模块     类拓展   设计模式   有限状态机   网络模块   工具类    "},{"id":6,"href":"/WithWhatForUnity/Utils/MathUtils/Random/","title":"随机数工具函数","parent":"数学工具类","content":"   方法 描述     GetRandomNumbers() 获取一组随机数 by lyb   GetRandomType() 获取概率类型    "},{"id":7,"href":"/WithWhatForUnity/Utils/MathUtils/Random/GetRandomNumbers/","title":"GetRandomNumbers()","parent":"随机数工具函数","content":"Github Gitee\nWithWhat.Utils\n描述    获取一组随机数 by lyb\n参数       参数名 类型 描述     count int 数量   min int 最小值   max int 最大值   canRepeat bool 是否可以重复   avoidRepetition List 不允许出现的数字    返回值       类型 描述     List 一组随机数    "},{"id":8,"href":"/WithWhatForUnity/Utils/UIUtils/ForceUpdateLayout/","title":"ForceUpdateLayout()","parent":"UI工具工具类","content":"Github Gitee\nWithWhat.Utils\n描述    强制刷新UI布局\n参数       参数名 类型 描述     rect RectTransform 带有Layout的RectTransform    "},{"id":9,"href":"/WithWhatForUnity/Utils/VectorUtils/StringToVector2/","title":"StringToVector2()","parent":"Vector工具类","content":"Github Gitee\nWithWhat.Utils\n描述    字符串转v2\n参数       参数名 类型 描述     position string 字符串 \u0026ldquo;(1,1)\u0026rdquo; 或 \u0026ldquo;1,1\u0026rdquo;    返回值       类型 描述     Vector2 转换结果，null或空字符串返回(0,0)    "},{"id":10,"href":"/WithWhatForUnity/Utils/VectorUtils/StringToVector3/","title":"StringToVector3()","parent":"Vector工具类","content":"Github Gitee\nWithWhat.Utils\n描述    字符串转v3\n参数       参数名 类型 描述     position string 字符串 \u0026ldquo;(1,1,1)\u0026rdquo; 或 \u0026ldquo;1,1,1\u0026rdquo;    返回值       类型 描述     Vector3 转换结果，null或空字符串返回(0,0,0)    "},{"id":11,"href":"/WithWhatForUnity/Utils/UIUtils/","title":"UI工具工具类","parent":"工具类","content":"   方法 描述     ForceUpdateLayout() 强制刷新UI布局    "},{"id":12,"href":"/WithWhatForUnity/Utils/VectorUtils/","title":"Vector工具类","parent":"工具类","content":"   方法 描述     StringToVector3() 字符串转v3   StringToVector2() 字符串转v2    "},{"id":13,"href":"/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_3/","title":"Bezier_3","parent":"贝塞尔曲线工具函数","content":"Github Gitee\nWithWhat.Utils\n描述    计算三次贝塞尔曲线上的所有点 by lyb\n参数       参数名 类型 描述     startPoint Vector3 起点   endPoint Vector3 终点   conttolPoint1 Vector3 控制点1   conttolPoint2 Vector3 控制点2   segementNum int 采样率，默认10    返回值       类型 描述     List 三次贝塞尔曲线上的所有点，点个数取决于采样率    "},{"id":14,"href":"/WithWhatForUnity/Utils/MathUtils/Bezier/","title":"贝塞尔曲线工具函数","parent":"数学工具类","content":"   方法 描述     Bezier_2_Single() 计算二次贝塞尔曲线点在某个采样上的点   Bezier_2() 计算二次贝塞尔曲线上的所有点   Bezier_3_Single() 计算三次贝塞尔曲线点在某个采样上的点   Bezier_3() 计算三次贝塞尔曲线上的所有点    "},{"id":15,"href":"/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_3_Single/","title":"Bezier_3_Single","parent":"贝塞尔曲线工具函数","content":"Github Gitee\nWithWhat.Utils\n描述    计算三次贝塞尔曲线点在某个采样上的点 by lyb\n参数       参数名 类型 描述     t float 采样   p0 Vector3 起点   p1 Vector3 控制点1   p2 Vector3 控制点2   p3 Vector3 终点    返回值       类型 描述     Vector3 三次贝塞尔曲线一个采样的点    "},{"id":16,"href":"/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_2/","title":"Bezier_2()","parent":"贝塞尔曲线工具函数","content":"Github Gitee\nWithWhat.Utils\n描述    计算二次贝塞尔曲线上的所有点\n参数       参数名 类型 描述     startPoint Vector3 起点   endPoint Vector3 终点   conttolPoint Vector3 控制点   segementNum int 采样率，默认10    返回值       类型 描述     List 二次贝塞尔曲线上的所有点，点个数取决于采样率    "},{"id":17,"href":"/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_2_Single/","title":"Bezier_2_Single()","parent":"贝塞尔曲线工具函数","content":"Github Gitee\nWithWhat.Utils\n描述    计算二次贝塞尔曲线点在某个采样上的点\n参数       参数名 类型 描述     t float 采样   p0 Vector3 起点   p1 Vector3 控制点   p2 Vector3 终点    返回值       类型 描述     Vector3 二次贝塞尔曲线一个采样的点    "},{"id":18,"href":"/WithWhatForUnity/DesignPattern/Repository/FileSystemRepository/","title":"FileSystemRepository","parent":"仓储模式","content":"Github Gitee\nWithWhat.DesignPattern\n描述    文件仓储\n用法    using UnityEngine; using WithWhat.Repository; public class RepositoryTest : MonoBehaviour { public class User { public string UserName; public string Password; } private FileSystemRepository\u0026lt;User\u0026gt; _fileSystemRepository; private void Awake() { var user = new User() { UserName = \u0026#34;张三\u0026#34;, Password = \u0026#34;123\u0026#34; }; _fileSystemRepository.Insert(user); } } "},{"id":19,"href":"/WithWhatForUnity/DesignPattern/Repository/","title":"仓储模式","parent":"设计模式","content":"   模块 描述     FileSystemRepository 文件仓储    "},{"id":20,"href":"/WithWhatForUnity/DesignPattern/","title":"设计模式","parent":"用什么？这里或许能找到答案...","content":"   模块 描述     SingleTon 单例模板   Factory 工厂模式   Inject 注入   Mediator 中介模式    "},{"id":21,"href":"/WithWhatForUnity/DesignPattern/Mediator/Mediator/","title":"Mediator","parent":"中介模式","content":"Github Gitee\nWithWhat.DesignPattern\n描述    中介模式\n用法    using UnityEngine; using WithWhat.DesignPattern; public class MediatorTest : MonoBehaviour { public enum MediatorTestEnum { Test, } private void Awake() { Mediator.Instance.Register(MediatorTestEnum.Test, func); } private void func(int key, object[] param) { print($\u0026#34;{key} {param[0] as string}\u0026#34;); } } using UnityEngine; using WithWhat.DesignPattern; public class Send : MonoBehaviour { void Start() { Mediator.Instance.Send(MediatorTest.MediatorTestEnum.Test, \u0026#34;hello\u0026#34;); } } "},{"id":22,"href":"/WithWhatForUnity/DesignPattern/Mediator/","title":"中介模式","parent":"设计模式","content":"   类 描述     Mediator 中介模式    "},{"id":23,"href":"/WithWhatForUnity/DesignPattern/Inject/ServiceLocator/","title":"ServiceLocator","parent":"服务定位模式","content":"Github Gitee\nWithWhat.DesignPattern\n描述    服务定位模式，用于注入\n用法    using UnityEngine; using WithWhat.DesignPattern; public class InjectTest : MonoBehaviour { public class Foo { public void Do() { print($\u0026#34;{GetHashCode()}\u0026#34;); } } private void Awake() { ServiceLocator.RegisterSingleTon\u0026lt;Foo\u0026gt;(); } void Start() { var foo = ServiceLocator.Resolve\u0026lt;Foo\u0026gt;(); foo.Do(); } } "},{"id":24,"href":"/WithWhatForUnity/DesignPattern/Inject/","title":"服务定位模式","parent":"设计模式","content":"   类 描述     ServiceLocator 服务定位模式    "},{"id":25,"href":"/WithWhatForUnity/DesignPattern/Factory/TransientObjectFactory/","title":"TransientObjectFactory","parent":"工厂模式","content":"Github Gitee\nWithWhat.DesignPattern\n描述    临时对象池工厂\n用法    using UnityEngine; using WithWhat.DesignPattern; public class TransientFactoryTest : MonoBehaviour { private TransientObjectFactory _transientObjectFactory; public class Foo { public void Do() { print($\u0026#34;{GetHashCode()}:DoSomething\u0026#34;); } } private void Awake() { _transientObjectFactory = new TransientObjectFactory(); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { var foo = _transientObjectFactory.AcquireObject\u0026lt;Foo\u0026gt;(); foo.Do(); } } } "},{"id":26,"href":"/WithWhatForUnity/DesignPattern/Factory/","title":"工厂模式","parent":"设计模式","content":"   类 描述     PoolObjectFactory 对象池工厂   SingleTonObejctFactory 单例工厂   TransientObjectFactory 临时对象工厂    "},{"id":27,"href":"/WithWhatForUnity/DesignPattern/Factory/SingleTonObejctFactory/","title":"SingleTonObejctFactory","parent":"工厂模式","content":"Github Gitee\nWithWhat.DesignPattern\n描述    单例池工厂\n用法    using UnityEngine; using WithWhat.DesignPattern; public class SingleTonFactoryTest : MonoBehaviour { private SingleTonObejctFactory _singleTonObejctFactory; public class HttpService { public void GetData() { print($\u0026#34;{this.GetHashCode()}:GetData\u0026#34;); } } private void Awake() { _singleTonObejctFactory = new SingleTonObejctFactory(); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { var httpService = _singleTonObejctFactory.AcquireObject\u0026lt;HttpService\u0026gt;(); httpService.GetData(); } } } "},{"id":28,"href":"/WithWhatForUnity/DesignPattern/Factory/PoolObjectFactory/","title":"PoolObjectFactory","parent":"工厂模式","content":"Github Gitee\nWithWhat.DesignPattern\n描述    对象池工厂\n用法    using UnityEngine; using WithWhat.DesignPattern; public class PoolFactoryTest : MonoBehaviour { private PoolObjectFactory _poolObjectFactory; public class DBConnect { public void Insert() { print($\u0026#34;insert{this.GetHashCode()}\u0026#34;); } } private void Awake() { _poolObjectFactory = new PoolObjectFactory(100, false); } private void Update() { if (Input.GetKeyDown(KeyCode.Space)) { // 从对象池获取对象  var dbConnect = _poolObjectFactory.AcquireObject\u0026lt;DBConnect\u0026gt;(); dbConnect.Insert(); // 使用完，返还给对象池  _poolObjectFactory.ReleaseObject(dbConnect); } } } "},{"id":29,"href":"/WithWhatForUnity/DesignPattern/SingleTon/SingleTon/","title":"SingleTon","parent":"单例模板","content":"Github Gitee\nWithWhat.DesignPattern\n描述    单例模板\n用法    using UnityEngine; using WithWhat.DesignPattern; public class Foo1 : Singleton\u0026lt;Foo1\u0026gt; { private Foo1() { } public void DoSomething() { Debug.Log(\u0026#34;i do\u0026#34;); } } public class SingleTonTest : MonoBehaviour { void Start() { Foo1.Instance.DoSomething(); } } "},{"id":30,"href":"/WithWhatForUnity/DesignPattern/SingleTon/","title":"单例模板","parent":"设计模式","content":"   类 描述     MonoSingleTon Mono单例模板   SingleTon 单例模板    "},{"id":31,"href":"/WithWhatForUnity/DesignPattern/SingleTon/MonoSingleTon/","title":"MonoSingleTon","parent":"单例模板","content":"Github Gitee\nWithWhat.DesignPattern\n描述    Mono单例模板，当脚本没有手动挂载到GameObject上时，会自动创建一个DontDestory的物体\n用法    using UnityEngine; using WithWhat.DesignPattern; public class Foo : MonoSingleTon\u0026lt;Foo\u0026gt; { public void DoSomething() { print(\u0026#34;do it\u0026#34;); } } public class MonoSingleTonTest : MonoBehaviour { void Start() { Foo.Instance.DoSomething(); } } "},{"id":32,"href":"/WithWhatForUnity/Net/WebRequestMgr/","title":"HTTP请求","parent":"网络模块","content":"   属性/方法 描述     Domian 域名   StartGetRequest Get请求   StartPostRequest Post请求   StartPostRequestByJson Post请求，Json传参    "},{"id":33,"href":"/WithWhatForUnity/Net/WebRequestMgr/StartPostRequestByJson/","title":"StartPostRequestByJson()","parent":"HTTP请求","content":"Github Gitee\nWithWhat.Net.Http\n描述    Post请求，通过json传参\n参数       参数名 类型 描述     url string 请求地址,不包含域名   postData string Json数据   resultFunc Action\u0026lt;bool, string\u0026gt; 请求完成后的回调,参数1:是否请求成功,参数2:成功时是json,失败时是错误提示   header Dictionary\u0026lt;string, string\u0026gt; 请求头（可选）    用法：    using UnityEngine; using WithWhat.Net.Http; using Newtonsoft.Json; public class PostByJsonTest : MonoBehaviour { class Payload { public string url; public string type; } private void Awake() { WebRequestMgr.Instance.Domain = \u0026#34;https://api.muxiaoguo.cn/api/\u0026#34;; } void Start() { var payload = new Payload() { url = \u0026#34;qq.com\u0026#34;,type= \u0026#34;Cz\u0026#34; }; WebRequestMgr.Instance.StartPostRequestByJson(\u0026#34;ICP\u0026#34;, JsonConvert.SerializeObject(payload), (success, message) =\u0026gt; { if (success) { print(message); } }); } } "},{"id":34,"href":"/WithWhatForUnity/Net/","title":"网络模块","parent":"用什么？这里或许能找到答案...","content":"   模块 描述     Http Http模块   SignalRClient Signal模块    "},{"id":35,"href":"/WithWhatForUnity/Net/WebRequestMgr/StartPostRequest/","title":"StartPostRequest()","parent":"HTTP请求","content":"Github Gitee\nWithWhat.Net.Http\n描述    Post请求\n参数       参数名 类型 描述     url string 请求地址,不包含域名   postData WWWForm 表单   resultFunc Action\u0026lt;bool, string\u0026gt; 请求完成后的回调,参数1:是否请求成功,参数2:成功时是json,失败时是错误提示   header Dictionary\u0026lt;string, string\u0026gt; 请求头（可选）    用法：    using UnityEngine; using WithWhat.Net.Http; public class PostTest : MonoBehaviour { private void Awake() { WebRequestMgr.Instance.Domain = \u0026#34;https://api.muxiaoguo.cn/api/\u0026#34;; } void Start() { var requestData = new WWWForm(); requestData.AddField(\u0026#34;phoneNum\u0026#34;, \u0026#34;13786310544\u0026#34;); WebRequestMgr.Instance.StartPostRequest(\u0026#34;chePhone\u0026#34;, requestData, (success, message) =\u0026gt; { if (success) { print(message); } }); } } "},{"id":36,"href":"/WithWhatForUnity/ClassExtision/RectTransformExtision/GetMousePosition/","title":"GetMousePosition()","parent":"RectTransform类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    获取鼠标在UI上的位置 by lyb\n参数       参数名 类型 描述     camera Camera Screen Space - Camera 模式下需要传入画布指定的相机    返回值       类型 描述     Vector3 鼠标在UI上的位置    用法：    using UnityEngine; using WithWhat.ClassExtision; public class GetMousePositionTest : MonoBehaviour { void Update() { print((this.transform as RectTransform).GetMousePosition()); } } 案例    Github Gitee\n"},{"id":37,"href":"/WithWhatForUnity/ClassExtision/RectTransformExtision/","title":"RectTransform类拓展","parent":"类拓展","content":"   方法 描述     GetMousePosition() 获取鼠标在UI上的位置 by lyb   WorldToCanvasPoint() 世界坐标转ui坐标    "},{"id":38,"href":"/WithWhatForUnity/ClassExtision/","title":"类拓展","parent":"用什么？这里或许能找到答案...","content":"   类 描述     EnumExtision 枚举类拓展   RectTransformExtision RectTransform类拓展   TransformExtision Transform类拓展   Vector3Extision Vector3类拓展    "},{"id":39,"href":"/WithWhatForUnity/ClassExtision/Vector3Extision/Middle/","title":"Middle()","parent":"Vector3类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    计算两个点的中点\n参数       参数名 类型 描述     to Vector3 另一个点    返回值       类型 描述     Vector3 中点    用法：    using UnityEngine; using WithWhat.ClassExtision; public class MiddleTest : MonoBehaviour { public GameObject other; void Start() { print(this.transform.position.Middle(other.transform.position)); } } 案例    Github Gitee\n"},{"id":40,"href":"/WithWhatForUnity/ClassExtision/Vector3Extision/","title":"Vector3类拓展","parent":"类拓展","content":"   方法 描述     Middle() 计算两个点的中点    "},{"id":41,"href":"/WithWhatForUnity/ClassExtision/TransformExtision/FindChildByName/","title":"FindChildByName()","parent":"Transform类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    根据名称查找子物体（递归）\n参数       参数名 类型 描述     name string 物体名称    用法：    using UnityEngine; using WithWhat.ClassExtision; public class FindChildByNameTest : MonoBehaviour { void Start() { print(this.transform.FindChildByName(\u0026#34;GameObject\u0026#34;).name); } } 案例    Github Gitee\n"},{"id":42,"href":"/WithWhatForUnity/ClassExtision/TransformExtision/","title":"Transform类拓展","parent":"类拓展","content":"   方法 描述     FindChildByName() 根据名称查找子物体（递归）   GetChilds() 获取所有的子物体，不包含孙物体   SetChildsActive() 设置所有子物体的active，不包含孙物体   SetPostionToMousePosition() 设置物体的世界坐标为鼠标所在位置    "},{"id":43,"href":"/WithWhatForUnity/ClassExtision/TransformExtision/SetPostionToMousePosition/","title":"SetPostionToMousePosition()","parent":"Transform类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    设置物体的世界坐标为鼠标所在位置\n参数       参数名 类型 描述     camera Camera 相机   targetGameObjectPosition Vector3 目标物体(参考物)坐标   offset Vector3 偏移量    用法：    using UnityEngine; using WithWhat.ClassExtision; public class SetTheWorldPostionToTheMousePositionTest : MonoBehaviour { public GameObject plan; void Update() { this.transform.SetPostionToMousePosition(Camera.main, plan.transform.position, Vector3.zero); } } 案例    Github Gitee\n"},{"id":44,"href":"/WithWhatForUnity/ClassExtision/TransformExtision/SetChildsActive/","title":"SetChildsActive()","parent":"Transform类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    设置所有子物体的active，不包含孙物体\n参数       参数名 类型 描述     value bool 显示or隐藏    用法：    using UnityEngine; using WithWhat.ClassExtision; public class SetChildsActiveTest : MonoBehaviour { private void Start() { this.transform.SetChildsActive(false); } } 案例    [Github]https://github.com/AlanWeekend/WithWhatForUnity/tree/master/Assets/Example/ClassExtision/TransformExtision/SetChildsActive) Gitee\n"},{"id":45,"href":"/WithWhatForUnity/ClassExtision/TransformExtision/GetChilds/","title":"GetChilds()","parent":"Transform类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    获取所有的子物体，不包含孙物体\n返回值       类型 描述     List 子物体集合    用法：    using UnityEngine; using WithWhat.ClassExtision; public class GetChildsTest : MonoBehaviour { void Start() { foreach (var child in this.transform.GetChilds()) { print(child.name); } } } 案例    Github Gitee\n"},{"id":46,"href":"/WithWhatForUnity/ClassExtision/RectTransformExtision/WorldToCanvasPoint/","title":"WorldToCanvasPoint()","parent":"RectTransform类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    世界坐标转ui坐标\n参数       参数名 类型 描述     canvas Canvas 画布   worldPos Vector3 世界坐标    返回值       类型 描述     Vector2 UI坐标    用法：    using UnityEngine; using WithWhat.ClassExtision; public class WorldToCanvasPointTest : MonoBehaviour { public GameObject Cube; public Canvas canvas; void Start() { print(RectTransformExtision.WorldToCanvasPoint(canvas, Cube.transform.position)); } } 案例    Github Gitee\n"},{"id":47,"href":"/WithWhatForUnity/ClassExtision/EnumExtision/GetEnumNamesList/","title":"GetEnumNamesList()","parent":"枚举类拓展","content":"Github Gitee\nWithWhat.ClassExtision\n描述    获取枚举类型中所有的字段名组成的字符串List\n返回值       类型 描述     List 枚举字段的字符串    用法：    using UnityEngine; using WithWhat.ClassExtision; public class Test : MonoBehaviour { enum UIEnum { Login, Register, } void Start() { print(typeof(UIEnum).GetEnumNamesList()); } } "},{"id":48,"href":"/WithWhatForUnity/Net/SignalRClient/","title":"SignalRClient","parent":"网络模块","content":"Github Gitee\nWithWhat.Net.SignalR\n描述    SignalR客户端，基于Microsoft.AspNetCore.SignalR.Client。\n默认不启用，使用请在WithWhat-其他选项-SignalRClient勾选启用。\n启用前请先将Microsoft.AspNetCore.SignalR.Client.DLL及其依赖添加到项目中。\n 若在项目中使用了其他Nuget包，建议在Player Setting中关闭Assembly Version Validation\n 依赖文件    整理好的依赖文件如下，放到Plugins中可以直接用。如果和你项目中的其他DLL冲突，请自行替换。\n.Net 4.x\n.Net Standard 2.0(暂未整理)\n用法：    using Microsoft.AspNetCore.SignalR.Client; using UnityEngine; using WithWhat.Net.SignalR; public class SignalRHelper : MonoBehaviour { private string msg; private void Awake() { // 初始化客户端  SignalRClient.Instance.InitClient(\u0026#34;http://10.100.100.116:8081/chathub\u0026#34;); // 注册连接成功回调  SignalRClient.Instance.OnConnected += OnConnected; // 注册连接失败回调  SignalRClient.Instance.OnDisConnected += OnDisConnected; // 注册重连回调  SignalRClient.Instance.OnReconnecting += OnReconnecting; } private void Start() { // 连接服务器  SignalRClient.Instance.ConnectToServer(); // 注册远程回调（接收消息）  SignalRClient.Instance.Connection.On\u0026lt;string, string, string\u0026gt;(\u0026#34;ReceiveMessage\u0026#34;, (message, user, type) =\u0026gt; { msg += $\u0026#34;{message} {user} {type}\\r\\n\u0026#34;; Debug.Log($\u0026#34;{message} {user} {type}\u0026#34;); }); } private void OnGUI() { GUI.Label(new Rect(0, 0, 300, 1000), msg,new GUIStyle() { fontSize=20,fontStyle=FontStyle.Bold}); } private void OnReconnecting() { print(\u0026#34;重新连接\u0026#34;); } private void OnConnected() { print(\u0026#34;已连接服务器\u0026#34;); msg += \u0026#34;已连接服务器\\r\\n\u0026#34;; // 调用远程方法  SignalRClient.Instance.InvokeAsync(\u0026#34;AddToGroup\u0026#34;, \u0026#34;topic-2\u0026#34;); } private void OnDisConnected() { print(\u0026#34;已断开连接\u0026#34;); } } "},{"id":49,"href":"/WithWhatForUnity/ClassExtision/EnumExtision/","title":"枚举类拓展","parent":"类拓展","content":"   方法 描述     GetEnumNamesList() 获取枚举类型中所有的字段名组成的字符串List    "},{"id":50,"href":"/WithWhatForUnity/Net/WebRequestMgr/Domain/","title":"Domain","parent":"HTTP请求","content":"Github Gitee\nWithWhat.Net.Http\n描述    设置Http请求的基础域名，必须设置\n用法    using UnityEngine; using WithWhat.Net.Http; public class DomainTest : MonoBehaviour { private void Awake() { WebRequestMgr.Instance.Domain = \u0026#34;https://api.muxiaoguo.cn/api/chePhone/\u0026#34;; } } "},{"id":51,"href":"/WithWhatForUnity/Net/WebRequestMgr/StartGetRequest/","title":"StartGetRequest()","parent":"HTTP请求","content":"Github Gitee\nWithWhat.Net.Http\n描述    Get请求\n参数       参数名 类型 描述     url string 请求地址,不包含域名   resultFunc Action\u0026lt;bool, string\u0026gt; 请求完成后的回调,参数1:是否请求成功,参数2:成功时是json,失败时是错误提示   header Dictionary\u0026lt;string, string\u0026gt; 请求头（可选）    用法：    using UnityEngine; using WithWhat.Net.Http; public class GetTest : MonoBehaviour { private void Awake() { WebRequestMgr.Instance.Domain = \u0026#34;https://api.muxiaoguo.cn/api/\u0026#34;; } void Start() { WebRequestMgr.Instance.StartGetRequest(\u0026#34;chePhone?phoneNum=13786310544\u0026#34;, (success, message) =\u0026gt; { if (success) { print(message); } }); } } "},{"id":52,"href":"/WithWhatForUnity/tags/","title":"Tags","parent":"用什么？这里或许能找到答案...","content":""},{"id":53,"href":"/WithWhatForUnity/FSM/","title":"有限状态机","parent":"用什么？这里或许能找到答案...","content":"WithWhat.FSM\nGithub Gitee\n用法    using UnityEngine; using WithWhat.FSM; public class FSMTest : MonoBehaviour { /// \u0026lt;summary\u0026gt;  /// 状态枚举  /// \u0026lt;/summary\u0026gt;  enum State { /// \u0026lt;summary\u0026gt;  /// 站立状态  /// \u0026lt;/summary\u0026gt;  idle, /// \u0026lt;summary\u0026gt;  /// 攻击状态  /// \u0026lt;/summary\u0026gt;  attack } /// \u0026lt;summary\u0026gt;  /// 站立状态  /// \u0026lt;/summary\u0026gt;  class IdleState : FSMStateTemplete\u0026lt;FSMTest\u0026gt; { public IdleState(int id, FSMTest o) : base(id, o) { } public override void OnEnter(params object[] args) { Debug.Log(\u0026#34;站立\u0026#34;); } } /// \u0026lt;summary\u0026gt;  /// 攻击状态  /// \u0026lt;/summary\u0026gt;  class AttackState : FSMStateTemplete\u0026lt;FSMTest\u0026gt; { public AttackState(int id, FSMTest o) : base(id, o) { } public override void OnEnter(params object[] args) { Debug.Log(\u0026#34;攻击\u0026#34;); // 攻击后切换到站立状态  owner.playerStateMachine.TranslateState((int)State.idle); } } private FSMStateMachine playerStateMachine; private IdleState _idleState; private AttackState _attackState; private void Awake() { _idleState = new IdleState((int)State.idle, this); _attackState = new AttackState((int)State.attack, this); playerStateMachine = new FSMStateMachine(_idleState); playerStateMachine.AddState(_attackState); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { playerStateMachine.TranslateState((int)State.attack); } } } 案例    Github Gitee\n"}]