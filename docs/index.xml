<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>用什么？这里或许能找到答案...</title>
    <link>https://yongshen.me/WithWhatForUnity/</link>
    <description>Recent content on 用什么？这里或许能找到答案...</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Dec 2021 17:06:28 +0800</lastBuildDate><atom:link href="https://yongshen.me/WithWhatForUnity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GetRandomType()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Random/GetRandomType/</link>
      <pubDate>Fri, 10 Dec 2021 17:06:28 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Random/GetRandomType/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    获取概率类型
参数       参数名 类型 描述     probabilitys List 每种可能性的概率，例如[20,30,50]    返回值       类型 描述     int 概率类型，第几种可能性    </description>
    </item>
    
    <item>
      <title>RemoveMatch()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/ListUtils/RemoveMatch/</link>
      <pubDate>Fri, 10 Dec 2021 17:06:28 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/ListUtils/RemoveMatch/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    删除List中符合条件的所有元素，不会产生额外的GC，只遍历一次集合 详情
参数       参数名 类型 描述     Match Predicate 匹配函数    </description>
    </item>
    
    <item>
      <title>GetRandomNumbers()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Random/GetRandomNumbers/</link>
      <pubDate>Thu, 09 Dec 2021 10:49:08 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Random/GetRandomNumbers/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    获取一组随机数 by lyb
参数       参数名 类型 描述     count int 数量   min int 最小值   max int 最大值   canRepeat bool 是否可以重复   avoidRepetition List 不允许出现的数字    返回值       类型 描述     List 一组随机数    </description>
    </item>
    
    <item>
      <title>ForceUpdateLayout()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/UIUtils/ForceUpdateLayout/</link>
      <pubDate>Wed, 24 Nov 2021 15:50:26 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/UIUtils/ForceUpdateLayout/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    强制刷新UI布局
参数       参数名 类型 描述     rect RectTransform 带有Layout的RectTransform    </description>
    </item>
    
    <item>
      <title>StringToVector3()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/Vector3Utils/StringToVector3/</link>
      <pubDate>Wed, 24 Nov 2021 15:50:26 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/Vector3Utils/StringToVector3/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    字符串转v3
参数       参数名 类型 描述     position string 字符串 &amp;ldquo;(1,1,1)&amp;rdquo; 或 &amp;ldquo;1,1,1&amp;rdquo;    返回值       类型 描述     Vector3 转换结果，null或空字符串返回(0,0,0)    </description>
    </item>
    
    <item>
      <title>Bezier_3</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_3/</link>
      <pubDate>Wed, 24 Nov 2021 15:37:54 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_3/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    计算三次贝塞尔曲线上的所有点 by lyb
参数       参数名 类型 描述     startPoint Vector3 起点   endPoint Vector3 终点   conttolPoint1 Vector3 控制点1   conttolPoint2 Vector3 控制点2   segementNum int 采样率，默认10    返回值       类型 描述     List 三次贝塞尔曲线上的所有点，点个数取决于采样率    </description>
    </item>
    
    <item>
      <title>Bezier_3_Single</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_3_Single/</link>
      <pubDate>Wed, 24 Nov 2021 15:36:07 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_3_Single/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    计算三次贝塞尔曲线点在某个采样上的点 by lyb
参数       参数名 类型 描述     t float 采样   p0 Vector3 起点   p1 Vector3 控制点1   p2 Vector3 控制点2   p3 Vector3 终点    返回值       类型 描述     Vector3 三次贝塞尔曲线一个采样的点    </description>
    </item>
    
    <item>
      <title>Bezier_2()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_2/</link>
      <pubDate>Wed, 24 Nov 2021 15:32:38 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_2/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    计算二次贝塞尔曲线上的所有点
参数       参数名 类型 描述     startPoint Vector3 起点   endPoint Vector3 终点   conttolPoint Vector3 控制点   segementNum int 采样率，默认10    返回值       类型 描述     List 二次贝塞尔曲线上的所有点，点个数取决于采样率    </description>
    </item>
    
    <item>
      <title>Bezier_2_Single()</title>
      <link>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_2_Single/</link>
      <pubDate>Wed, 24 Nov 2021 15:27:26 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Utils/MathUtils/Bezier/Bezier_2_Single/</guid>
      <description>Github Gitee
WithWhat.Utils
描述    计算二次贝塞尔曲线点在某个采样上的点
参数       参数名 类型 描述     t float 采样   p0 Vector3 起点   p1 Vector3 控制点   p2 Vector3 终点    返回值       类型 描述     Vector3 二次贝塞尔曲线一个采样的点    </description>
    </item>
    
    <item>
      <title>FileSystemRepository</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/Repository/FileSystemRepository/</link>
      <pubDate>Wed, 24 Nov 2021 15:17:10 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/Repository/FileSystemRepository/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    文件仓储
用法    using UnityEngine; using WithWhat.Repository; public class RepositoryTest : MonoBehaviour { public class User { public string UserName; public string Password; } private FileSystemRepository&amp;lt;User&amp;gt; _fileSystemRepository; private void Awake() { var user = new User() { UserName = &amp;#34;张三&amp;#34;, Password = &amp;#34;123&amp;#34; }; _fileSystemRepository.Insert(user); } } </description>
    </item>
    
    <item>
      <title>Mediator</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/Mediator/Mediator/</link>
      <pubDate>Wed, 24 Nov 2021 15:10:21 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/Mediator/Mediator/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    中介模式
用法    using UnityEngine; using WithWhat.DesignPattern; public class MediatorTest : MonoBehaviour { public enum MediatorTestEnum { Test, } private void Awake() { Mediator.Instance.Register(MediatorTestEnum.Test, func); } private void func(int key, object[] param) { print($&amp;#34;{key} {param[0] as string}&amp;#34;); } } using UnityEngine; using WithWhat.DesignPattern; public class Send : MonoBehaviour { void Start() { Mediator.Instance.Send(MediatorTest.MediatorTestEnum.Test, &amp;#34;hello&amp;#34;); } } </description>
    </item>
    
    <item>
      <title>ServiceLocator</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/Inject/ServiceLocator/</link>
      <pubDate>Wed, 24 Nov 2021 14:49:46 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/Inject/ServiceLocator/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    服务定位模式，用于注入
用法    using UnityEngine; using WithWhat.DesignPattern; public class InjectTest : MonoBehaviour { public class Foo { public void Do() { print($&amp;#34;{GetHashCode()}&amp;#34;); } } private void Awake() { ServiceLocator.RegisterSingleTon&amp;lt;Foo&amp;gt;(); } void Start() { var foo = ServiceLocator.Resolve&amp;lt;Foo&amp;gt;(); foo.Do(); } } </description>
    </item>
    
    <item>
      <title>TransientObjectFactory</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/Factory/TransientObjectFactory/</link>
      <pubDate>Wed, 24 Nov 2021 11:46:06 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/Factory/TransientObjectFactory/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    临时对象池工厂
用法    using UnityEngine; using WithWhat.DesignPattern; public class TransientFactoryTest : MonoBehaviour { private TransientObjectFactory _transientObjectFactory; public class Foo { public void Do() { print($&amp;#34;{GetHashCode()}:DoSomething&amp;#34;); } } private void Awake() { _transientObjectFactory = new TransientObjectFactory(); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { var foo = _transientObjectFactory.AcquireObject&amp;lt;Foo&amp;gt;(); foo.Do(); } } } </description>
    </item>
    
    <item>
      <title>SingleTonObejctFactory</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/Factory/SingleTonObejctFactory/</link>
      <pubDate>Wed, 24 Nov 2021 11:25:04 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/Factory/SingleTonObejctFactory/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    单例池工厂
用法    using UnityEngine; using WithWhat.DesignPattern; public class SingleTonFactoryTest : MonoBehaviour { private SingleTonObejctFactory _singleTonObejctFactory; public class HttpService { public void GetData() { print($&amp;#34;{this.GetHashCode()}:GetData&amp;#34;); } } private void Awake() { _singleTonObejctFactory = new SingleTonObejctFactory(); } void Update() { if (Input.GetKeyDown(KeyCode.Space)) { var httpService = _singleTonObejctFactory.AcquireObject&amp;lt;HttpService&amp;gt;(); httpService.GetData(); } } } </description>
    </item>
    
    <item>
      <title>PoolObjectFactory</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/Factory/PoolObjectFactory/</link>
      <pubDate>Wed, 24 Nov 2021 11:19:45 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/Factory/PoolObjectFactory/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    对象池工厂
用法    using UnityEngine; using WithWhat.DesignPattern; public class PoolFactoryTest : MonoBehaviour { private PoolObjectFactory _poolObjectFactory; public class DBConnect { public void Insert() { print($&amp;#34;insert{this.GetHashCode()}&amp;#34;); } } private void Awake() { _poolObjectFactory = new PoolObjectFactory(100, false); } private void Update() { if (Input.GetKeyDown(KeyCode.Space)) { // 从对象池获取对象  var dbConnect = _poolObjectFactory.AcquireObject&amp;lt;DBConnect&amp;gt;(); dbConnect.Insert(); // 使用完，返还给对象池  _poolObjectFactory.ReleaseObject(dbConnect); } } } </description>
    </item>
    
    <item>
      <title>SingleTon</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/SingleTon/SingleTon/</link>
      <pubDate>Tue, 23 Nov 2021 14:08:45 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/SingleTon/SingleTon/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    单例模板
用法    using UnityEngine; using WithWhat.DesignPattern; public class Foo1 : Singleton&amp;lt;Foo1&amp;gt; { private Foo1() { } public void DoSomething() { Debug.Log(&amp;#34;i do&amp;#34;); } } public class SingleTonTest : MonoBehaviour { void Start() { Foo1.Instance.DoSomething(); } } </description>
    </item>
    
    <item>
      <title>MonoSingleTon</title>
      <link>https://yongshen.me/WithWhatForUnity/DesignPattern/SingleTon/MonoSingleTon/</link>
      <pubDate>Tue, 23 Nov 2021 14:02:09 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/DesignPattern/SingleTon/MonoSingleTon/</guid>
      <description>Github Gitee
WithWhat.DesignPattern
描述    Mono单例模板，当脚本没有手动挂载到GameObject上时，会自动创建一个DontDestory的物体
用法    using UnityEngine; using WithWhat.DesignPattern; public class Foo : MonoSingleTon&amp;lt;Foo&amp;gt; { public void DoSomething() { print(&amp;#34;do it&amp;#34;); } } public class MonoSingleTonTest : MonoBehaviour { void Start() { Foo.Instance.DoSomething(); } } </description>
    </item>
    
    <item>
      <title>StartPostRequestByJson()</title>
      <link>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/StartPostRequestByJson/</link>
      <pubDate>Tue, 23 Nov 2021 12:01:14 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/StartPostRequestByJson/</guid>
      <description>Github Gitee
WithWhat.Net.Http
描述    Post请求，通过json传参
参数       参数名 类型 描述     url string 请求地址,不包含域名   postData string Json数据   resultFunc Action&amp;lt;bool, string&amp;gt; 请求完成后的回调,参数1:是否请求成功,参数2:成功时是json,失败时是错误提示   header Dictionary&amp;lt;string, string&amp;gt; 请求头（可选）    用法：    using UnityEngine; using WithWhat.Net.Http; using Newtonsoft.Json; public class PostByJsonTest : MonoBehaviour { class Payload { public string url; public string type; } private void Awake() { WebRequestMgr.</description>
    </item>
    
    <item>
      <title>StartPostRequest()</title>
      <link>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/StartPostRequest/</link>
      <pubDate>Tue, 23 Nov 2021 11:54:30 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/StartPostRequest/</guid>
      <description>Github Gitee
WithWhat.Net.Http
描述    Post请求
参数       参数名 类型 描述     url string 请求地址,不包含域名   postData WWWForm 表单   resultFunc Action&amp;lt;bool, string&amp;gt; 请求完成后的回调,参数1:是否请求成功,参数2:成功时是json,失败时是错误提示   header Dictionary&amp;lt;string, string&amp;gt; 请求头（可选）    用法：    using UnityEngine; using WithWhat.Net.Http; public class PostTest : MonoBehaviour { private void Awake() { WebRequestMgr.Instance.Domain = &amp;#34;https://api.muxiaoguo.cn/api/&amp;#34;; } void Start() { var requestData = new WWWForm(); requestData.</description>
    </item>
    
    <item>
      <title>GetMousePosition()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/RectTransformExtision/GetMousePosition/</link>
      <pubDate>Mon, 22 Nov 2021 17:05:46 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/RectTransformExtision/GetMousePosition/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    获取鼠标在UI上的位置 by lyb
参数       参数名 类型 描述     camera Camera Screen Space - Camera 模式下需要传入画布指定的相机    返回值       类型 描述     Vector3 鼠标在UI上的位置    用法：    using UnityEngine; using WithWhat.ClassExtision; public class GetMousePositionTest : MonoBehaviour { void Update() { print((this.transform as RectTransform).</description>
    </item>
    
    <item>
      <title>Middle()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/Vector3Extision/Middle/</link>
      <pubDate>Mon, 22 Nov 2021 16:30:03 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/Vector3Extision/Middle/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    计算两个点的中点
参数       参数名 类型 描述     to Vector3 另一个点    返回值       类型 描述     Vector3 中点    用法：    using UnityEngine; using WithWhat.ClassExtision; public class MiddleTest : MonoBehaviour { public GameObject other; void Start() { print(this.transform.position.Middle(other.transform.position)); } } 案例    Github Gitee</description>
    </item>
    
    <item>
      <title>FindChildByName()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/FindChildByName/</link>
      <pubDate>Mon, 22 Nov 2021 16:22:17 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/FindChildByName/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    根据名称查找子物体（递归）
参数       参数名 类型 描述     name string 物体名称    用法：    using UnityEngine; using WithWhat.ClassExtision; public class FindChildByNameTest : MonoBehaviour { void Start() { print(this.transform.FindChildByName(&amp;#34;GameObject&amp;#34;).name); } } 案例    Github Gitee</description>
    </item>
    
    <item>
      <title>SetPostionToMousePosition()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/SetPostionToMousePosition/</link>
      <pubDate>Mon, 22 Nov 2021 16:06:00 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/SetPostionToMousePosition/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    设置物体的世界坐标为鼠标所在位置
参数       参数名 类型 描述     camera Camera 相机   targetGameObjectPosition Vector3 目标物体(参考物)坐标   offset Vector3 偏移量    用法：    using UnityEngine; using WithWhat.ClassExtision; public class SetTheWorldPostionToTheMousePositionTest : MonoBehaviour { public GameObject plan; void Update() { this.transform.SetPostionToMousePosition(Camera.main, plan.transform.position, Vector3.zero); } } 案例    Github Gitee</description>
    </item>
    
    <item>
      <title>SetChildsActive()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/SetChildsActive/</link>
      <pubDate>Mon, 22 Nov 2021 15:53:44 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/SetChildsActive/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    设置所有子物体的active，不包含孙物体
参数       参数名 类型 描述     value bool 显示or隐藏    用法：    using UnityEngine; using WithWhat.ClassExtision; public class SetChildsActiveTest : MonoBehaviour { private void Start() { this.transform.SetChildsActive(false); } } 案例    [Github]https://github.com/AlanWeekend/WithWhatForUnity/tree/master/Assets/Example/ClassExtision/TransformExtision/SetChildsActive) Gitee</description>
    </item>
    
    <item>
      <title>GetChilds()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/GetChilds/</link>
      <pubDate>Mon, 22 Nov 2021 15:47:44 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/TransformExtision/GetChilds/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    获取所有的子物体，不包含孙物体
返回值       类型 描述     List 子物体集合    用法：    using UnityEngine; using WithWhat.ClassExtision; public class GetChildsTest : MonoBehaviour { void Start() { foreach (var child in this.transform.GetChilds()) { print(child.name); } } } 案例    Github Gitee</description>
    </item>
    
    <item>
      <title>WorldToCanvasPoint()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/RectTransformExtision/WorldToCanvasPoint/</link>
      <pubDate>Mon, 22 Nov 2021 15:14:42 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/RectTransformExtision/WorldToCanvasPoint/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    世界坐标转ui坐标
参数       参数名 类型 描述     canvas Canvas 画布   worldPos Vector3 世界坐标    返回值       类型 描述     Vector2 UI坐标    用法：    using UnityEngine; using WithWhat.ClassExtision; public class WorldToCanvasPointTest : MonoBehaviour { public GameObject Cube; public Canvas canvas; void Start() { print(RectTransformExtision.</description>
    </item>
    
    <item>
      <title>GetEnumNamesList()</title>
      <link>https://yongshen.me/WithWhatForUnity/ClassExtision/EnumExtision/GetEnumNamesList/</link>
      <pubDate>Mon, 22 Nov 2021 13:59:12 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/ClassExtision/EnumExtision/GetEnumNamesList/</guid>
      <description>Github Gitee
WithWhat.ClassExtision
描述    获取枚举类型中所有的字段名组成的字符串List
返回值       类型 描述     List 枚举字段的字符串    用法：    using UnityEngine; using WithWhat.ClassExtision; public class Test : MonoBehaviour { enum UIEnum { Login, Register, } void Start() { print(typeof(UIEnum).GetEnumNamesList()); } } </description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/Domain/</link>
      <pubDate>Fri, 19 Nov 2021 17:12:03 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/Domain/</guid>
      <description>Github Gitee
WithWhat.Net.Http
描述    设置Http请求的基础域名，必须设置
用法    using UnityEngine; using WithWhat.Net.Http; public class DomainTest : MonoBehaviour { private void Awake() { WebRequestMgr.Instance.Domain = &amp;#34;https://api.muxiaoguo.cn/api/chePhone/&amp;#34;; } } </description>
    </item>
    
    <item>
      <title>StartGetRequest()</title>
      <link>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/StartGetRequest/</link>
      <pubDate>Fri, 19 Nov 2021 17:12:03 +0800</pubDate>
      
      <guid>https://yongshen.me/WithWhatForUnity/Net/WebRequestMgr/StartGetRequest/</guid>
      <description>Github Gitee
WithWhat.Net.Http
描述    Get请求
参数       参数名 类型 描述     url string 请求地址,不包含域名   resultFunc Action&amp;lt;bool, string&amp;gt; 请求完成后的回调,参数1:是否请求成功,参数2:成功时是json,失败时是错误提示   header Dictionary&amp;lt;string, string&amp;gt; 请求头（可选）    用法：    using UnityEngine; using WithWhat.Net.Http; public class GetTest : MonoBehaviour { private void Awake() { WebRequestMgr.Instance.Domain = &amp;#34;https://api.muxiaoguo.cn/api/&amp;#34;; } void Start() { WebRequestMgr.Instance.StartGetRequest(&amp;#34;chePhone?phoneNum=13786310544&amp;#34;, (success, message) =&amp;gt; { if (success) { print(message); } }); } } </description>
    </item>
    
  </channel>
</rss>
